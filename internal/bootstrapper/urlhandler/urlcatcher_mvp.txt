#include <Carbon/Carbon.h>
#include <stdio.h>
#include <stdbool.h>

struct Service
{
    bool service_started;
};

struct Service service;

static void handleAppleEvent(const AppleEvent *event, AppleEvent *reply, long refcon)
{
    DescType actualType;
    Size actualSize;
    char urlString[256];
    OSStatus status = AEGetParamPtr(event, keyDirectObject, typeChar,
                                    &actualType, urlString, sizeof(urlString), &actualSize);
    if (status != noErr)
    {
        return;
    }
    if (service.service_started)
    {
        printf("Received URL: %s\n", urlString);
    }
}

void applicationDidFinishLaunching()
{
    OSStatus status = AEInstallEventHandler(kInternetEventClass, kAEGetURL,
                                            NewAEEventHandlerUPP(handleAppleEvent), 0, false);
    if (status != noErr)
    {
        fprintf(stderr, "Failed to install Apple Event handler\n");
    }
}

int main()
{
    service.service_started = true;
    applicationDidFinishLaunching();
    printf("Application started. Waiting for events...\n");

    // Event loop
    while (true)
    {
        EventRef event;
        EventTargetRef target = GetEventDispatcherTarget();

        // Use a small timeout instead of kEventDurationForever
        OSStatus status = ReceiveNextEvent(0, NULL, 0.001, true, &event);

        if (status == noErr)
        {
            SendEventToEventTarget(event, target);
            ReleaseEvent(event);
        }
        else if (status == eventLoopTimedOutErr)
        {
            // Handle Apple Events here
            EventRecord carbonEvent;
            if (WaitNextEvent(highLevelEventMask, &carbonEvent, 0, NULL))
            {
                AEProcessAppleEvent(&carbonEvent);
            }
        }
        else
        {
            fprintf(stderr, "Error receiving event\n");
        }
    }
    return 0;
}